package @Package@;

import art.redoc.core.dto.PageResultDTO;
import art.redoc.core.dto.ResultDTO;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import @ConvertorPath@;
import @DTOPath@;
import @ModelPath@;
import @ServicePath@;

import javax.validation.Valid;

/**
 * @SeparateModel@ controller.
 *
 * @author code generator
 */
@Slf4j
@RestController
@RequestMapping("/api/@model@")
public class @Model@Controller {
    @Autowired
    private @Model@Service @model@Service;
    @Autowired
    private @Model@Convertor @model@Convertor;

    /**
     * Get model list.
     *
     * @param pageable Paging related params.
     * @return Model list.
     */
    @RequestMapping(value = "/list", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public PageResultDTO<@Model@DTO> search(final Pageable pageable) {
        final Page<@Model@> models = this.@model@Service.getAll(pageable);
        return this.@model@Convertor.toResultDTO(models);
    }

    /**
     * Get detail model by unique ID.
     *
     * @param id Unique ID.
     * @return Detail model.
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResultDTO<@Model@DTO> get(@PathVariable final @IDType@ id) {
        final @Model@ model = this.@model@Service.get(id);
        return this.@model@Convertor.toResultDTO(model);
    }

    /**
     * Create model.
     *
     * @param @model@DTO The model DTO.
     * @return DTO of the model that needs to be created.
     */
    @RequestMapping(method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResultDTO<@Model@DTO> create(@RequestBody @Valid final @Model@DTO @model@DTO) {
        final @Model@ model = this.@model@Convertor.toModel(@model@DTO);
        this.@model@Service.create(model);
        return this.@model@Convertor.toResultDTO(model);
    }

    /**
     * Update model.
     *
     * @param id  Unique ID.
     * @param dto DTO of the model that needs to be updated.
     * @return Updated model DTO.
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResultDTO<@Model@DTO> update(@PathVariable final @IDType@ id, @RequestBody @Valid final @Model@DTO dto) {
        dto.setId(id);
        final @Model@ model = this.@model@Convertor.toModel(dto);
        this.@model@Service.update(model);
        return this.@model@Convertor.toResultDTO(model);
    }

    /**
     * Delete model.
     *
     * @param id Unique ID.
     * @return The result of the model being deleted.
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    public ResultDTO<Void> delete(@PathVariable final @IDType@ id) {
        this.@model@Service.delete(id);
        return ResultDTO.success();
    }
}
